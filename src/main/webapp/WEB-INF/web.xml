<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1" metadata-complete="true">
	<display-name>Archetype Created Web Application</display-name>
	
	<!-- Spring MVC配置 -->
	<servlet>
    	<servlet-name>spring</servlet-name>
    	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
   		<!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，如spring-servlet.xml-->
    	<init-param>
        	<param-name>contextConfigLocation</param-name>
        	<!-- <param-value>/WEB-INF/spring-servlet.xml</param-value> --> <!-- 默认 -->
        	<param-value>classpath:spring-*.xml</param-value>
    	</init-param>
	    <load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
	    <servlet-name>spring</servlet-name>
	    <url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<!-- Spring MVC配置 -->
	
	<!-- spring start -->
	<!--指定applicationContext.xml配置文件的位置，可通过context-param加以指定  -->
	<!-- classpath是什么，以及classpath:和classpath*有何区别?
			1、classpath是指 WEB-INF文件夹下的classes目录
			2、classpath 和 classpath* 区别： 
				classpath：只会到你的class路径中查找找文件; （文件存放在src目录下）
				classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找. 
				
			"**/"表示的是任意目录； 
			"**/applicationContext-*.xml"表示任意目录下的以"applicationContext-"开头的XML文件。 
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<!-- 启动Web容器，自动装配ApplicationContext配置。实现ServletContextListener这个接口 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- spring end -->
	
	<!-- 字符编码 -->
	<filter>
  		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- log4j2 start-->
	<context-param>
  		<param-name>isLog4jAutoInitializationDisabled</param-name>
  		<param-value>false</param-value>
  	</context-param>
  	<!-- 默认就会找这个文件，不需要额外配置引用
  		<context-param>
      	<param-name>log4jConfiguration</param-name>
      	<param-value>classpath:/log4j2.xml</param-value>
  	</context-param> -->
  	
  	<listener>
    	<listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
  	</listener>
  	
  	<filter>
    	<filter-name>log4jServletFilter</filter-name>
    	<filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
  	</filter>
  	<filter-mapping>
    	<filter-name>log4jServletFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    	<dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
    	<dispatcher>INCLUDE</dispatcher>
    	<dispatcher>ERROR</dispatcher>
  	</filter-mapping>
  	<!-- log4j2 end-->
  	
  	<!-- JNDI资源引用 -->
	<!-- <resource-ref>  
		<description>JNDI DataSource</description>  
		<res-ref-name>jdbc/mmcDB</res-ref-name>  
		<res-ref-type>javax.sql.DataSource</res-ref-type>  
		<res-auth>Container</res-auth>
	</resource-ref> -->
</web-app>
