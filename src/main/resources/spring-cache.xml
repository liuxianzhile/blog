<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	default-lazy-init="false">
	
	<context:property-placeholder location="classpath:redis.properties" />
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}"/><!-- 最大闲置 -->
		<!-- <property name="minIdle" value="10"/> --><!-- 最小闲置 -->
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/><!-- 可以获取 -->
		<!-- <property name="testOnReturn" value="true"/> -->
    </bean>
    
	<!-- redis 配置,也可以把配置挪到properties配置文件中,再读取 -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<!-- 端口，默认6379 -->
	    <constructor-arg index="1" value="${redis.host}" name="host" type="java.lang.String"/>
	    <constructor-arg index="2" value="${redis.port}"  name="port" type="int"/>
	    <constructor-arg index="3" value="${redis.timeout}"  name="timeout" type="int"/>
		<constructor-arg index="4" value="${redis.password}" name="password" type="java.lang.String"/>
	</bean>
	<!-- 注意：
		这种 arguments 构造的方式，之前配置有缺点。
		这里之前的配置有问题，因为参数类型不一致，有时候jar和环境的问题，导致参数根据index对应，会处理问题，
		理论上加另一个 name，就可以解决，现在把name 和type都加上，更保险。
	 -->	

	<!-- 创建Redis工具类，封装好Redis的连接以进行相关的操作 -->
    <!-- <bean id="jedisUtil" class="com.blog.utils.JedisUtil" scope="singleton">
        <property name="jedisPool" ref="jedisPool"/>
    </bean> -->
    <!-- Redis的key操作 -->
    <!-- <bean id="jedisKeys" class="com.blog.utils.JedisUtil$Keys" scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean> -->
    <!-- Redis的Strings操作 -->
    <!-- <bean id="jedisStrings" class="com.blog.utils.JedisUtil$Strings" scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean> -->
    <!-- Redis的Lists操作 -->
    <!-- <bean id="jedisLists" class="com.blog.utils.JedisUtil$Lists" scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean> -->
    <!-- Redis的Sets操作 -->
    <!-- <bean id="jedisSets" class="com.blog.utils.JedisUtil$Sets" scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean> -->
    <!-- Redis的HashMap操作 -->
    <!-- <bean id="jedisHash" class="com.blog.utils.JedisUtil$Hash" scope="singleton">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean> -->
</beans>